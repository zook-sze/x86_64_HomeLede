#
# This is free software, licensed under the MIT License.
# Description: Build OpenWrt using GitHub Actions
#

#Actions自动化编译名称
name: Build HomeLede

#配置监视项
on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'

#定时
#  schedule:
#    - cron: 0 8 * * 5

#自定义变量
env:
#源码仓库地址
  REPO_URL: https://github.com/xiaoqingfengATGH/HomeLede
#源码分支
  REPO_BRANCH: k5
#自定义feeds.conf.default文件名
  FEEDS_CONF: feeds.conf.default
#自定义.config文件名
  CONFIG_FILE: .config
#自定义diy-part1.sh文件名
  DIY_P1_SH: diy-part1.sh
#自定义diy-part1.sh文件名
  DIY_P2_SH: diy-part2.sh
#上传 bin 目录（临时保存）
  UPLOAD_BIN_DIR: false
#上传固件目录（临时保存）
  UPLOAD_FIRMWARE: true
#上传至Releaese（永久保存）
  UPLOAD_RELEASE: true
#时区设置
  TZ: Asia/Shanghai

##配置运行环境
#设置运行平台
jobs:
  build:
    runs-on: ubuntu-18.04
#检出用户仓库
    steps:
    - name: Checkout
      uses: actions/checkout@main
#配置运行平台
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive  
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf /etc/apt/sources.list.d/* \
                    /usr/share/dotnet \
                    /usr/local/lib/android \
                    /opt/ghc \
                    /etc/mysql \
                    /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-1804)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
##运行环境设置完成

#克隆源码并建立工作目录连接
    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
#加载自定义feeds
    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH
#默认编译配置
    - name: Prepare Compile
      run: cd openwrt && ./prepareCompile.sh
#加载自定义配置
    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH
#SSH远程连接到Actions以便定制config
    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
#配置并下载安装包的源文件
    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
#开始编译固件
    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "::set-output name=status::success"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
#检查用户剩余空间
    - name: Check space usage
      if: (!cancelled())
      run: df -hT
#上传编译后的bin文件至github临时保存（包括固件及程序包）
    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"
#仅上传固件至github临时保存（不含编译后的安装包文件）
    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}
##上传文件至Releases页面（永久保存）
#生成Releases标签
    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "::set-output name=release_tag::$(date +"%Y.%m.%d-%H%M")"
        touch release.txt
        [ $UPLOAD_COWTRANSFER = true ] && echo "🔗 [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt
        [ $UPLOAD_WETRANSFER = true ] && echo "🔗 [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
        echo "::set-output name=status::success"
#上传固件至Releases
    - name: Upload firmware to release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*
#删除Artifaces中已编译的旧文件
    - name: Remove old Artifacts
      uses: c-hive/gha-remove-artifacts@v1.2.0
      with:
        age: '1 day'
        skip-recent: 3
#删除旧有的Releases固件（仅保存最近编译的3个固件）
    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.1.0
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
